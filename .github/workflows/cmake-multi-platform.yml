name: CMake Build (Windows)

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            build_type: Release
            target: windows

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        
    - name: Cache Chocolatey packages
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      with:
        path: C:\ProgramData\chocolatey\bin
        key: ${{ runner.os }}-choco-${{ hashFiles('**/choco-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-choco-

    - name: Setup Windows dependencies
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # check cache if restored
        if [ -d "C:\ProgramData\chocolatey\bin" ]; then
          echo "Restored Cache."
        else
          choco install openssl -y
        fi

    - name: Configure CMake (Windows)
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build (Windows)
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test (Windows)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

